buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.71.4"
	id 'com.github.ben-manes.versions' version '0.22.0'
	id 'org.cadixdev.licenser' version '0.5.1'
	id 'com.github.kt3k.coveralls' version '2.8.2'
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'eclipse'
	id 'java'
}

ext {
	MC_VERSION = '1.12.2'
	MANIFESTS = [
		'/': [
			'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'GitCommit': grgit.head().abbreviatedId,
			'Git-Branch': grgit.branch.current().getName()
		] as LinkedHashMap
	]
}

System.out.println(grgit.head().abbreviatedId)
System.out.println(grgit.branch.current().getName())

defaultTasks 'cleanBuild'

apply plugin: 'net.minecraftforge.gradle.forge'

def build_num = getBuildNumber()
version = "${mod_version}-build${build_num}"
group = "${mod_group}"
archivesBaseName = "${mod_archivesBaseName}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

System.out.println()
System.out.println('Java Information')
System.out.println('- Java:   	   ' + System.getProperty('java.version'))
System.out.println('- JVM:    	   ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
System.out.println('- Arch:  	   ' + System.getProperty('os.arch'))
System.out.println()
System.out.println('Minecraft Information')
System.out.println('- Minecraft:   ' + "${MC_VERSION}".toString())
System.out.println('- Forge:       ' + "${forge_version}".toString())
System.out.println('- Mappings:    ' + "${mappings_version}".toString())
System.out.println()
System.out.println('Mod Information')
System.out.println('- ID: 	       ' + "${mod_name}".toString())
System.out.println('- Name:        ' + "${mod_archivesBaseName}".toString())
System.out.println('- Version:     ' + "${version}".toString())
System.out.println()
System.out.println()

apply from: 'gradle/forge.gradle'
apply from: 'utilities.gradle'
apply from: 'gradle/development.gradle'
apply from: 'gradle/deploy.gradle'
apply from: 'gradle/versioning.gradle'
apply from: 'gradle/license.gradle'

//apply from: 'https://raw.githubusercontent.com/ReadOnlyDevelopment/gradle/galacticraft/dev-latest.gradle'

String gcbuild = "261"
String gcversion = "1.12.2-4.0.2.${gcbuild}"

repositories {
	ivy {
		url "https://micdoodle8.com/new-builds/"
		layout 'pattern', {
			artifact "[organization]/${gcbuild}/[module]-[revision].jar"
		}
		metadataSources {
			artifact()
		}
	}
}

dependencies {
	compile "GC-1.12-dev:GalacticraftCore-Dev:${gcversion}"
	compile "GC-1.12-dev:Galacticraft-API:${gcversion}"
	compile "GC-1.12-dev:Galacticraft-Planets-Dev:${gcversion}"
	compile "GC-1.12-dev:MicdoodleCore-Dev:${gcversion}"
}

String getBuildNumber() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "0"
}

task incrementBuild {
	doFirst {
		incrementBuild
	}
}

import static groovy.io.FileType.*

task copyToDependentLib {
	group = 'interstellar-api'
	description = 'Copies the Dev jar to specified directory'
	doLast {
		def devFile = '';
		def dir = new File("${buildDir}/libs")
		dir.eachFileRecurse(FILES) {
			if(it.name.contains('dev')) {
				devFile = it
			}
		}
		copy {
			from devFile
			into "C:/Users/rom/Documents/Interstellar-Exoplanets/lib"
		}
	}
}

task cleanBuild {
	group = 'build'
	description = 'Run Clean before calling Build'
	dependsOn 'clean'
	dependsOn 'build'
	tasks.findByName('build').mustRunAfter 'clean'
}

build.dependsOn signJar
build.finalizedBy incrementBuild // only increment on successful builds
incrementBuild.finalizedBy copyToDependentLib