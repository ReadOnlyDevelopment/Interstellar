import static groovy.io.FileType.FILES;
import java.nio.file.Path;
import java.nio.file.Paths;

buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.71.4"
	id 'com.github.ben-manes.versions' version '0.22.0'
	id 'org.cadixdev.licenser' version '0.5.1'
	id 'com.github.kt3k.coveralls' version '2.8.2'
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'eclipse'
	id 'groovy'
	id 'java'
}

apply plugin: 'net.minecraftforge.gradle.forge'

import java.util.LinkedHashMap

ext {
	MC_VERSION = '1.12.2'
	FORGE_VERSION = '14.23.5.2847'
	MCP_MAPPINGS = 'snapshot_20171003'
	SPEC_VERSION = 1
	IMPL_VERSION = 0
	BUILD_NUMBER = 0
	GC_BUILD = 261
	GC_VERSION = "1.12.2-4.0.2"
	GC_FULL_VERSION = "${GC_VERSION}.${GC_BUILD}"
	MANIFESTS = [
		'Specification-Title':      'Interstellar',
		'Specification-Vendor':     'ReadOnly Development',
		'Specification-Version':    SPEC_VERSION,
		'Implementation-Title':     project.group,
		'Implementation-Version':   project.version.substring(MC_VERSION.length() + 1),
		'Implementation-Vendor':    'ReadOnly Development',
		'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		'GitCommit': grgit.head().abbreviatedId,
		'Git-Branch': grgit.branch.current().getName(),
		'Built-Against': "${MC_VERSION}-${FORGE_VERSION}",
		'Using-Mappings': MCP_MAPPINGS,
		'Built-Against-Galacticraft': GC_FULL_VERSION
	] as LinkedHashMap
}

defaultTasks 'cleanBuild'

def build_num = getBuildNumber()
version = "${MC_VERSION}-${mod_version}-build${build_num}"
group = "${mod_group}"
archivesBaseName = "${mod_archivesBaseName}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
	sourceCompatibility = targetCompatibility = '1.8'
}

def applyScripts() {
	File srcDir = file('gradle')
	FileCollection collection = layout.files { srcDir.listFiles() }

	FileCollection scripts = collection.filter { File f ->
		f.name.endsWith('.gradle') || !f.directory
	}
	
	scripts.collect { relativePath(it) }.each { String s ->
		
		s = s.replace("\\", "/")
		def script = "$s"
		
		apply from: "$script"
	}
}

applyScripts()

printProjectInfo()

String getBuildNumber() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "0"
}

task incrementBuild {
	doFirst {
		def versionFile = file('version.properties')
		if (versionFile.canRead()) {
			Properties versionProps = new Properties()
			versionProps.load(new FileInputStream(versionFile))
			def num = versionProps['build_num'].toInteger() + 1
			println("incrementing BuildNumber to: " + num)
			versionProps['build_num'] = num.toString()
			versionProps.store(versionFile.newWriter(), null)
		} else {
			println("version.properties file not found! Ignoring.")
		}
	}
}

task cleanBuild {
	group = 'build'
	description = 'Run Clean before calling Build'
	dependsOn 'clean'
	dependsOn 'build'
	tasks.findByName('build').mustRunAfter 'clean'
}

build.dependsOn signJar
build.finalizedBy incrementBuild // only increment on successful builds