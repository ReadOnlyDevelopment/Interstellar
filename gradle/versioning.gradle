def getVersion(String type) {
	def maj = SPEC_VERSION
	def min = IMPL_VERSION
	BUILD_NUMBER = getBuildNumber()
	return makeVersionMap(maj, min, BUILD_NUMBER, grgit.head().abbreviatedId)["${type}"]
}

def getBuildNumber() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		return versionProps['build_num'].toString()
	}
	return "0"
}

def incrementBuild() {
	def versionFile = file('version.properties')
	if (versionFile.canRead()) {
		Properties versionProps = new Properties()
		versionProps.load(new FileInputStream(versionFile))
		def num = versionProps['build_num'].toInteger() + 1
		println("incrementing BuildNumber to: " + num)
		versionProps['build_num'] = num.toString()
		versionProps.store(versionFile.newWriter(), null)
	} else {
		println("version.properties file not found! Ignoring.")
	}
}

def makeVersionMap(maj, min, rev, githash) {
	def out = [
		major: maj.toString(),
		minor: min.toString(),
		revision: rev.toString(),
		githash: githash,
		version: "${maj}.${min}.${rev}.${githash}",
		version_short: "${maj}.${min}.${rev}"
	]
	return out
}

ext {
	getVersion = this.&getVersion
	getBuildNumber = this.&getBuildNumber
	incrementBuild = this.&incrementBuild
}