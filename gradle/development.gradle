if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

def setMainManifestProps = { Manifest manifest->
	manifest.attributes (
			'FMLAT': 'interstellar_at.cfg',
			)
	manifest.mainAttributes (
			'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
			'Timestamp': System.currentTimeMillis(),
			'Specification-Title': 'Interstellar',
			'Specification-Vendor': 'ReadOnly Development',
			'Specification-Version': '1',
			'Implementation-Title': 'Interstellar',
			'Implementation-Version': project.version,
			'Implementation-Vendor' :'ReadOnly Development',
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
			'Built-On': "${project.minecraft_version}-${project.forge_version}"
			)
}

jar {
	manifest(setMainManifestProps)
}

task signJar(type: SignJar, dependsOn: reobfJar) {
	onlyIf {
		project.hasProperty('keyStore')
	}

	keyStore = project.findProperty('keyStore')
	alias = project.findProperty('keyStoreAlias')
	storePass = project.findProperty('keyStorePass')
	keyPass = project.findProperty('keyStoreKeyPass')
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

task devJar(type: Jar) {
	from sourceSets.main.allJava
	from sourceSets.main.output
	classifier = 'dev'
	manifest(setMainManifestProps)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

artifacts {
	archives devJar
	archives sourceJar
	archives javadocJar
}